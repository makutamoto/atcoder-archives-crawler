directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
scalar Date

type Header {
  blue: Int!
  # The document's ID.
  _id: ID!
  orange: Int!
  green: Int!
  date: Date!
  gray: Int!
  yellow: Int!
  brown: Int!
  crawling: Boolean!
  cyan: Int!
  red: Int!
  # The document's timestamp.
  _ts: Long!
}

# 'Header' input values
input HeaderInput {
  crawling: Boolean!
  date: Date!
  gray: Int!
  brown: Int!
  green: Int!
  cyan: Int!
  blue: Int!
  yellow: Int!
  orange: Int!
  red: Int!
}

# The `Long` scalar type
 represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Update an existing document in the collection of 'User'
  updateUser(
    # The 'User' document's ID
    id: ID!
    # 'User' input values
    data: UserInput!
  ): User
  # Delete an existing document in the collection of 'Header'
  deleteHeader(
    # The 'Header' document's ID
    id: ID!
  ): Header
  # Create a new document in the collection of 'User'
  createUser(
    # 'User' input values
    data: UserInput!
  ): User!
  # Create a new document in the collection of 'Header'
  createHeader(
    # 'Header' input values
    data: HeaderInput!
  ): Header!
  # Delete an existing document in the collection of 'User'
  deleteUser(
    # The 'User' document's ID
    id: ID!
  ): User
  # Update an existing document in the collection of 'Header'
  updateHeader(
    # The 'Header' document's ID
    id: ID!
    # 'Header' input values
    data: HeaderInput!
  ): Header
}

type Query {
  # Find a document from the collection of 'User' by its id.
  findUserByID(
    # The 'User' document's ID
    id: ID!
  ): User
  # Find a document from the collection of 'Header' by its id.
  findHeaderByID(
    # The 'Header' document's ID
    id: ID!
  ): Header
  getLastHeader: Header
}

scalar Time

type User {
  rate: Int!
  name: String!
  # The document's ID.
  _id: ID!
  date: Date!
  # The document's timestamp.
  _ts: Long!
}

# 'User' input values
input UserInput {
  date: Date!
  name: String!
  rate: Int!
}
